server.port=8082
spring.application.name=api-gateway
eureka.client.service-url.defaultZone=http://localhost:8010/eureka

##This will enable http reuqest to send request to microservice via api gateway using
# microservice service name (We generally don't use names)
spring.cloud.gateway.discovery.locator.enabled=true
#to send request with lowercase (microservice locator name)
spring.cloud.gateway.discovery.locator.lower-case-service-id=true

#As we generally don't use srvice names, we will route http reuqests through api gateway:
#This id will be used as a name we want the the http request to be routed to
spring.cloud.gateway.routes[0].id=users-status-check
#It can be a name under which microservice is registered under eureka or 
#IP address to microservce running behind API gateway (like http://localhost:8081, but as port number is random, hard coding is not appropriate)
spring.cloud.gateway.routes[0].uri=lb://users-ws
#Used to match http requests using http heqaders/http method and then route the request to destination uri
#its like a if statement: if the condition in this predicate matches, then the request will be routed to destination uri
spring.cloud.gateway.routes[0].predicates[0]=Path=/users/status/check
spring.cloud.gateway.routes[0].predicates[1]=Method=GET
spring.cloud.gateway.routes[0].predicates[2]=Header=Authorization, Bearer (.*)
spring.cloud.gateway.routes[0].filters[0]=RemoveRequestHeader=Cookie
#spring.cloud.gateway.routes[0].filters[1]=RewritePath=/users-wc/users/status/check, /users/status/check
#using regex
#spring.cloud.gateway.routes[0].filters[1]=RewritePath=/users-ws/(?<segment>.*), /$\{segment}
spring.cloud.gateway.routes[0].filters[1]=AuthorizationHeaderFilter

spring.cloud.gateway.routes[1].id = users-ws
spring.cloud.gateway.routes[1].uri = lb://users-ws
spring.cloud.gateway.routes[1].predicates[0]=Path=/users-ws/users
spring.cloud.gateway.routes[1].predicates[1]=Method=POST
spring.cloud.gateway.routes[1].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[1].filters[1]=RewritePath=/users-ws/(?<segment>.*), /$\{segment}

spring.cloud.gateway.routes[2].id = users-ws-login
spring.cloud.gateway.routes[2].uri = lb://users-ws
spring.cloud.gateway.routes[2].predicates[0]=Path=/users-ws/users/login
spring.cloud.gateway.routes[2].predicates[1]=Method=POST
spring.cloud.gateway.routes[2].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[2].filters[1]=RewritePath=/users-ws/(?<segment>.*), /$\{segment}

spring.cloud.gateway.routes[3].id = users-ws-get-update-delete
spring.cloud.gateway.routes[3].uri = lb://users-ws
spring.cloud.gateway.routes[3].predicates[0]=Path=/users-ws/users/**
spring.cloud.gateway.routes[3].predicates[1]=Method=GET,PUT,DELETE
spring.cloud.gateway.routes[3].predicates[2]=Header=Authorization, Bearer (.*)
spring.cloud.gateway.routes[3].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[3].filters[1]=AuthorizationHeaderFilter
spring.cloud.gateway.routes[3].filters[2]=RewritePath=/users-ws/(?<segment>.*), /$\{segment}

spring.cloud.gateway.routes[4].id = users-ws-h2-console
spring.cloud.gateway.routes[4].uri = lb://users-ws
spring.cloud.gateway.routes[4].predicates[0]=Path=/users-ws/h2-console
spring.cloud.gateway.routes[4].predicates[1]=Method=GET
spring.cloud.gateway.routes[4].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[4].filters[1]=RewritePath=/users-ws/(?<segment>.*), /$\{segment}

spring.cloud.gateway.routes[5].id = users-ws-actuator
spring.cloud.gateway.routes[5].uri = lb://users-ws
spring.cloud.gateway.routes[5].predicates[0]=Path=/users-ws/actuator/**
spring.cloud.gateway.routes[5].predicates[1]=Method=GET
spring.cloud.gateway.routes[5].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[5].filters[1]=RewritePath=/users-ws/(?<segment>.*), /$\{segment}

token.secret=hfgry463hf746hf573ydh475fhy5739hfgry463hf746hf573ydh475fhy5739hfgry463hf746hf573ydh475fhy5739

spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

#Actuator:
#This config allows us to list down all routes that we have configured in this api gateway
management.endpoint.gateway.enabled=true
#This will expose only one api endpoint that is called gateway:
#We can add more endpoints separated by comma(e.g. health(it is added by default but as we have explicitly exposed only one edndpoint, we need to add heath as well to expose heath endpoint):
#If we want to expose all endpoints, use * only
#mappings : used for debugging purposes beacuse it allows to see all req mappings that have been registered in application
# can also be used to check if a specific url req path has been mapped to a method in a controller
management.endpoints.web.exposure.include=gateway,health,mappings



